import streamlit as st
import pandas as pd

from backend.search_logic import perform_search_and_analysis
from backend.gsheet_service import get_gsheet_client, get_worksheet_by_name

st.set_page_config(page_title="SAM ‚Äì Search and Analysis Machine", layout="wide")
st.title("üîç Search and Analysis Machine")

# Tabs
tab1, tab2, tab3, tab4 = st.tabs(["üîé –ü–æ—à—É–∫", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", "üß† GPT-–ê–Ω–∞–ª—ñ–∑", "üìá –ö–ª—ñ—î–Ω—Ç–∏ (CRM)"])

# ---------------- –ü–æ—à—É–∫ ----------------
with tab1:
    st.subheader("–ü–æ—à—É–∫ —Å–∞–π—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")

    keyword = st.text_input("üîë –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:")
    num_results = st.slider("–°–∫—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–Ω–∞–π—Ç–∏:", min_value=10, max_value=100, step=10, value=20)

    col1, col2 = st.columns(2)
    with col1:
        from_result = st.number_input("–ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ‚Ññ", min_value=0, value=0, step=10)

    with col2:
        only_new = st.checkbox("–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–∏—à–µ –Ω–æ–≤—ñ —Å–∞–π—Ç–∏", value=True)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫") and keyword:
        with st.spinner("üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫ —ñ –∞–Ω–∞–ª—ñ–∑..."):
            gc = get_gsheet_client()
            spreadsheet_id = "YOUR_SPREADSHEET_ID"  # üîÅ –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
            results = perform_search_and_analysis(keyword, gc, spreadsheet_id, only_new, num_results, from_result)
            st.success(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(results)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")

# ---------------- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ----------------
with tab2:
    st.subheader("üìä –ü–µ—Ä–µ–≥–ª—è–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

    try:
        gc = get_gsheet_client()
        sheet = gc.open_by_key("YOUR_SPREADSHEET_ID")  # üîÅ –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
        ws = get_worksheet_by_name(sheet, "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        data = ws.get_all_records()
        df = pd.DataFrame(data)

        show_only_yes = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∏—Ö (–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫)", value=False)

        if show_only_yes:
            df = df[df["GPT: –ö–ª—ñ—î–Ω—Ç"] == "–¢–∞–∫"]

        st.dataframe(df)
    except Exception as e:
        st.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ: {e}")

# ---------------- GPT-–ê–Ω–∞–ª—ñ–∑ ----------------
with tab3:
    st.subheader("üß† GPT-–ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ (–¥–æ 20 –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤)"):
        st.warning("üîÑ GPT –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ (–ø–æ–∫–∏ —â–æ ‚Äî —Å–∏–º—É–ª—è—Ü—ñ—è)")

# ---------------- CRM ----------------
with tab4:
    st.subheader("üìá –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ (CRM)")

    try:
        gc = get_gsheet_client()
        sheet = gc.open_by_key("YOUR_SPREADSHEET_ID")  # üîÅ –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
        ws = get_worksheet_by_name(sheet, "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        data = ws.get_all_records()
        df = pd.DataFrame(data)

        if not df.empty:
            df = df[df["GPT: –ö–ª—ñ—î–Ω—Ç"] == "–¢–∞–∫"]

            category_filter = st.multiselect("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", sorted(df["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"].dropna().unique()))
            country_filter = st.multiselect("–ö—Ä–∞—ó–Ω–∞:", sorted(df["–ö—Ä–∞—ó–Ω–∞"].dropna().unique()))

            if category_filter:
                df = df[df["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"].isin(category_filter)]

            if country_filter:
                df = df[df["–ö—Ä–∞—ó–Ω–∞"].isin(country_filter)]

            st.dataframe(df.reset_index(drop=True), use_container_width=True)
        else:
            st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

    except Exception as e:
        st.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
