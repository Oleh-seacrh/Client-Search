import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
from backend.search_logic import perform_search_and_analysis
from backend.gsheet_service import get_gsheet_client, get_worksheet_by_name
from frontend.companies_tab import render_companies_tab
from frontend.search_tab import render_search_tab



st.set_page_config(page_title="SAM ‚Äì Search and Analysis Machine", layout="wide")
st.title("üîç Search and Analysis Machine")

gsheet_id = st.secrets["spreadsheet_id"]


tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üîé –ü–æ—à—É–∫", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", "üß† GPT-–ê–Ω–∞–ª—ñ–∑", "üìá CRM", "üè¢ –ö–æ–º–ø–∞–Ω—ñ—ó", "üìá Client"])


with tab1:
    
    st.subheader("–ü–æ—à—É–∫ —Å–∞–π—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")

    keyword = st.text_input("üîë –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:")
    num_results = st.slider("–°–∫—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–Ω–∞–π—Ç–∏:", min_value=10, max_value=100, step=10, value=20)

    col1, col2 = st.columns(2)
    with col1:
        from_result = st.number_input("–ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ‚Ññ", min_value=0, value=0, step=10)

    with col2:
        only_new = st.checkbox("–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–∏—à–µ –Ω–æ–≤—ñ —Å–∞–π—Ç–∏", value=True)

    if st.button("üîç –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ —Å–∞–π—Ç—ñ–≤", key="start_site_search") and keyword:
        with st.spinner("üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫ —ñ –∞–Ω–∞–ª—ñ–∑..."):
            gc = get_gsheet_client()
            results = perform_search_and_analysis(keyword, gc, gsheet_id, only_new, num_results, from_result)
            st.success(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(results)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")
    st.info("üîí –ü–æ—à—É–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ")


with tab2:
    st.subheader("üìä –ü–µ—Ä–µ–≥–ª—è–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

    try:
        gc = get_gsheet_client()
        sheet = gc.open_by_key(gsheet_id)
        ws = get_worksheet_by_name(sheet, "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        data = ws.get_all_records()
        df = pd.DataFrame(data)

        show_only_yes = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∏—Ö (–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫)", value=False)

        if show_only_yes:
            df = df[df["GPT: –ö–ª—ñ—î–Ω—Ç"] == "–¢–∞–∫"]

        st.dataframe(df)

    except Exception as e:
        st.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ: {e}")



with tab3:
    st.subheader("üß† GPT-–ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ (–¥–æ 20 –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤)", key="analyze_results_from_companies"):
        st.warning("üîÑ GPT –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ (–ø–æ–∫–∏ —â–æ ‚Äî —Å–∏–º—É–ª—è—Ü—ñ—è)")


with tab4:
    render_search_tab()
with tab5:
    render_companies_tab()
with tab6:
    st.subheader("üìá –î–∞–Ω—ñ CRM (–≤–∫–ª–∞–¥–∫–∞ 'Client')")

    try:
        gc = get_gsheet_client()
        sheet = gc.open_by_key(st.secrets["spreadsheet_id"])
        ws = sheet.worksheet("Client")
        data = ws.get_all_records()
        df = pd.DataFrame(data)

        if df.empty:
            st.info("–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è üï≥Ô∏è")
        else:
            st.dataframe(df)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

