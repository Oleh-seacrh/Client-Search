
import streamlit as st
import requests
import openai
import pandas as pd
import re
from urllib.parse import urlparse
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–µ–∫—Ä–µ—Ç–∏
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
GSHEET_JSON = st.secrets["GSHEET_SERVICE_ACCOUNT"]
GSHEET_SPREADSHEET_ID = "1S0nkJYXrVTsMHmeOC-uvMWnrw_yQi5z8NzRsJEcBjc0"

client = openai.OpenAI(api_key=OPENAI_API_KEY)

def get_gsheet_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(GSHEET_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def simplify_url(link):
    parsed = urlparse(link)
    return f"{parsed.scheme}://{parsed.netloc}"

def extract_email(text):
    emails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", text)
    return emails[0] if emails else "‚Äî"

def analyze_with_gpt(title, snippet, link):
    prompt = f"""
    –¢–∏ –¥–æ–ø–æ–º–∞–≥–∞—î—à –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —Å–∞–π—Ç –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º –¥–ª—è –º–µ–¥–∏—á–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (Agfa, Fujifilm, Carestream).

    üîπ –ù–∞–∑–≤–∞: {title}
    üîπ –û–ø–∏—Å: {snippet}
    üîπ –õ—ñ–Ω–∫: {link}

    1Ô∏è‚É£ –ß–∏ –º–æ–∂–µ —Ü–µ –±—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç? (–¢–∞–∫ / –ù—ñ + –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è)

    2Ô∏è‚É£ –Ø–∫–∏–π —Ç–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ü–µ –π–º–æ–≤—ñ—Ä–Ω–æ?
    (–í–∏–±–µ—Ä–∏ –æ–¥–∏–Ω: –¥–∏—Å—Ç—Ä–∏–±‚Äô—é—Ç–æ—Ä / –ª—ñ–∫–∞—Ä–Ω—è / –º–µ–¥–∏—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä / –≤–∏—Ä–æ–±–Ω–∏–∫ / —ñ–Ω—à–µ)

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ:
    –ö–ª—ñ—î–Ω—Ç: –¢–∞–∫/–ù—ñ ‚Äî [–ø–æ—è—Å–Ω–µ–Ω–Ω—è]
    –¢–∏–ø: [—Ç–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó]
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GPT", layout="wide")
st.title("üîç –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ Google + GPT")

query = st.text_input("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:")

col1, col2 = st.columns(2)
with col1:
    num_results = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", min_value=1, max_value=100, value=10, step=1)
with col2:
    start_index = st.number_input("–ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ‚Ññ", min_value=1, max_value=91, value=1, step=10)

start = st.button("–ü–æ—à—É–∫")

if start and query:
    tab_name = query.strip().lower().replace("/", "_")[:30]
    with st.spinner("–ü–æ—à—É–∫ —Ç–∞ GPT-–∞–Ω–∞–ª—ñ–∑..."):
        params = {
            "key": st.secrets["GOOGLE_API_KEY"],
            "cx": st.secrets["CSE_ID"],
            "q": query,
            "num": num_results,
            "start": start_index
        }
        results = requests.get("https://www.googleapis.com/customsearch/v1", params=params).json().get("items", [])

        gc = get_gsheet_client()
        sh = gc.open_by_key(GSHEET_SPREADSHEET_ID)

        try:
            sheet = sh.worksheet(tab_name)
        except:
            sheet = sh.add_worksheet(title=tab_name, rows="1000", cols="4")
            sheet.append_row(["–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó", "–°–∞–π—Ç", "–ü–æ—à—Ç–∞", "–í—ñ–¥–≥—É–∫ GPT"])

        existing_links = set(sheet.col_values(2))

        for item in results:
            title = item["title"]
            raw_link = item["link"]
            link = simplify_url(raw_link)
            if link in existing_links:
                continue

            snippet = item.get("snippet", "")
            email = extract_email(title + " " + snippet)

            try:
                gpt_response = analyze_with_gpt(title, snippet, link)
            except Exception as e:
                gpt_response = f"–ü–æ–º–∏–ª–∫–∞: {e}"

            if gpt_response.strip().startswith("–¢–∞–∫"):
                sheet.append_row([title, link, email, gpt_response], value_input_option="USER_ENTERED")
                existing_links.add(link)

        st.success(f"‚úÖ –î–∞–Ω—ñ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∫–ª–∞–¥–∫–∏ '{tab_name}', –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É")
