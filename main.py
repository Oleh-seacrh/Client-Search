import streamlit as st
import requests
import openai
import pandas as pd

# üîê –ß–∏—Ç–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ —ñ–∑ Streamlit Cloud
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
CSE_ID = st.secrets["CSE_ID"]

client = openai.OpenAI(api_key=OPENAI_API_KEY)

def google_search(query):
    url = f"https://www.googleapis.com/customsearch/v1?key={GOOGLE_API_KEY}&cx={CSE_ID}&q={query}"
    response = requests.get(url)
    return response.json().get("items", [])

def is_blocked(title, snippet, link):
    BLOCKED_KEYWORDS = ["agfa", "carestream", "fujifilm", "official", "manufacturer", "corporate", "global"]
    combined = f"{title} {snippet} {link}".lower()
    return any(word in combined for word in BLOCKED_KEYWORDS)

def analyze_with_gpt(title, snippet, link):
    prompt = f"""
    –¢–∏ –¥–æ–ø–æ–º–∞–≥–∞—î—à –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —Å–∞–π—Ç –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º –¥–ª—è –º–µ–¥–∏—á–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (Agfa, Fujifilm, Carestream).

    üîπ –ù–∞–∑–≤–∞: {title}
    üîπ –û–ø–∏—Å: {snippet}
    üîπ –õ—ñ–Ω–∫: {link}

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ: –¢–∞–∫ –∞–±–æ –ù—ñ ‚Äî —ñ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (1 —Ä–µ—á–µ–Ω–Ω—è).
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GPT", layout="wide")
st.title("üîç –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ Google + GPT")

query = st.text_input("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:")
start = st.button("–ü–æ—à—É–∫")

if start and query:
    with st.spinner("–ü–æ—à—É–∫ —Ç–∞ GPT-–∞–Ω–∞–ª—ñ–∑..."):
        results = google_search(query)
        all_data = []

        for item in results:
            title = item["title"]
            link = item["link"]
            snippet = item.get("snippet", "")

            if is_blocked(title, snippet, link):
                continue

            try:
                gpt_response = analyze_with_gpt(title, snippet, link)
            except Exception as e:
                gpt_response = f"–ü–æ–º–∏–ª–∫–∞: {e}"

            all_data.append({
                "–ù–∞–∑–≤–∞": title,
                "–ü–æ—Å–∏–ª–∞–Ω–Ω—è": link,
                "–û–ø–∏—Å": snippet,
                "GPT-–≤–∏—Å–Ω–æ–≤–æ–∫": gpt_response
            })

        if not all_data:
            st.warning("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
        else:
            df = pd.DataFrame(all_data)
            st.success("–ì–æ—Ç–æ–≤–æ!")
            st.dataframe(df)
            df.to_csv("gpt_google_results.csv", index=False, encoding="utf-8-sig")
            st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", data=df.to_csv(index=False, encoding="utf-8-sig"), file_name="gpt_google_results.csv", mime="text/csv")
