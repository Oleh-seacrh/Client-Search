
import streamlit as st
import requests
import openai
import re
from urllib.parse import urlparse
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–µ–∫—Ä–µ—Ç–∏
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
GSHEET_JSON = st.secrets["GSHEET_SERVICE_ACCOUNT"]
GSHEET_SPREADSHEET_ID = "1S0nkJYXrVTsMHmeOC-uvMWnrw_yQi5z8NzRsJEcBjc0"

client = openai.OpenAI(api_key=OPENAI_API_KEY)

def get_gsheet_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(GSHEET_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def simplify_url(link):
    parsed = urlparse(link)
    return f"{parsed.scheme}://{parsed.netloc}"

def analyze_with_gpt(title, snippet, link):
    prompt = f"""
    –í–∏ —î –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ —É –∫–æ–º–ø–∞–Ω—ñ—ó, —è–∫–∞ –∑–∞–π–º–∞—î—Ç—å—Å—è –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º —Ä–µ–Ω—Ç–≥–µ–Ω-–ø–ª—ñ–≤–∫–∏, –∫–∞—Å–µ—Ç, –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤ —Ç–∞ –º–µ–¥–∏—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.

    –í–µ–±—Å–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó: https://www.xraymedem.com

    –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –æ—Ü—ñ–Ω–∏—Ç–∏, —á–∏ —Å–∞–π—Ç, –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ Google, —î –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º –¥–ª—è –Ω–∞—à–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó.

    üîπ –ù–∞–∑–≤–∞ (Google): {title}
    üîπ –û–ø–∏—Å: {snippet}
    üîπ –õ—ñ–Ω–∫: {link}

    ‚ùó –í–ê–ñ–õ–ò–í–û:
    –í—Å—ñ, —Ö—Ç–æ –∑–≥–∞–¥—É—î –∞–±–æ –ø—Ä–æ–¥–∞—î —Ä–µ–Ω—Ç–≥–µ–Ω-–ø–ª—ñ–≤–∫—É, –∫–∞—Å–µ—Ç–∏, –º–µ–¥–∏—á–Ω—ñ –ø—Ä–∏–Ω—Ç–µ—Ä–∏ ‚Äî —î –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç–∞–º–∏.
    –¶–µ –≤–∫–ª—é—á–∞—î –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤, —Ä–µ—Å–µ–ª–µ—Ä—ñ–≤, –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ —ñ –¥–∏—Å—Ç—Ä–∏–±‚Äô—é—Ç–æ—Ä—ñ–≤.
    ‚ùå –ù–µ –≤—Ä–∞—Ö–æ–≤—É–π—Ç–µ –ª–∏—à–µ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Fujifilm India", —è–∫—â–æ —Ü–µ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª –±—Ä–µ–Ω–¥—É).
    ‚úÖ –ù–∞–≤—ñ—Ç—å –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –¥–∏—Å—Ç—Ä–∏–±‚Äô—é—Ç–æ—Ä–∏ ‚Äî —Ü–µ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏.

    –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:
    –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó: ...
    –ö–ª—ñ—î–Ω—Ç: –¢–∞–∫/–ù—ñ ‚Äî ...
    –¢–∏–ø: ...
    –ü–æ—à—Ç–∞: ...
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GPT", layout="wide")
st.title("üîç –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ Google + GPT")

query = st.text_input("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:")
col1, col2 = st.columns(2)
with col1:
    num_results = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", min_value=1, max_value=100, value=10, step=1)
with col2:
    start_index = st.number_input("–ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ‚Ññ", min_value=1, max_value=91, value=1, step=10)

start = st.button("–ü–æ—à—É–∫")

if start and query:
    tab_name = query.strip().lower().replace("/", "_")[:30]
    with st.spinner("–ü–æ—à—É–∫ —Ç–∞ GPT-–∞–Ω–∞–ª—ñ–∑..."):
        params = {
            "key": st.secrets["GOOGLE_API_KEY"],
            "cx": st.secrets["CSE_ID"],
            "q": query,
            "num": num_results,
            "start": start_index
        }
        results = requests.get("https://www.googleapis.com/customsearch/v1", params=params).json().get("items", [])

        gc = get_gsheet_client()
        sh = gc.open_by_key(GSHEET_SPREADSHEET_ID)

        try:
            sheet = sh.worksheet(tab_name)
        except:
            sheet = sh.add_worksheet(title=tab_name, rows="1000", cols="5")
            sheet.append_row(["–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó", "–°–∞–π—Ç", "–ü–æ—à—Ç–∞", "–¢–∏–ø", "–í—ñ–¥–≥—É–∫ GPT"])

        existing_links = set(sheet.col_values(2))

        for item in results:
            title = item["title"]
            raw_link = item["link"]
            link = simplify_url(raw_link)
            if link in existing_links:
                continue

            snippet = item.get("snippet", "")

            try:
                gpt_response = analyze_with_gpt(title, snippet, link)
            except Exception as e:
                gpt_response = f"–ü–æ–º–∏–ª–∫–∞: {e}"

            st.markdown(f"### üîé [{title}]({link})")
            st.markdown("üß† **GPT:**")
            st.code(gpt_response, language="markdown")

            if "–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫" in gpt_response:
                name_match = re.search(r"–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó: (.+)", gpt_response)
                type_match = re.search(r"–¢–∏–ø: (.+)", gpt_response)
                email_match = re.search(r"–ü–æ—à—Ç–∞: (.+)", gpt_response)

                name = name_match.group(1).strip() if name_match else title
                org_type = type_match.group(1).strip() if type_match else "‚Äî"
                email = email_match.group(1).strip() if email_match else "‚Äî"

                sheet.append_row([name, link, email, org_type, gpt_response], value_input_option="USER_ENTERED")
                existing_links.add(link)

        st.success(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–æ –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' (–∑ email, —Ç–∏–ø–æ–º —ñ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ '–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫')")
