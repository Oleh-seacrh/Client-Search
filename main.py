
# –û–Ω–æ–≤–ª–µ–Ω–æ: –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è email, –∫—Ä–∞—ó–Ω–∏ —Ç–∞ –≤—ñ–¥–≥—É–∫—É GPT
import streamlit as st
import requests
import openai
import re
from urllib.parse import urlparse
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
GSHEET_JSON = st.secrets["GSHEET_SERVICE_ACCOUNT"]
GSHEET_SPREADSHEET_ID = "1S0nkJYXrVTsMHmeOC-uvMWnrw_yQi5z8NzRsJEcBjc0"

client = openai.OpenAI(api_key=OPENAI_API_KEY)

def extract_email_and_country(gpt_response):
    import re
    email_match = re.search(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", gpt_response)
    email = email_match.group(0).strip() if email_match else "-"

    country_match = re.search(r"–ö—Ä–∞—ó–Ω–∞: ([^\n\r]+)", gpt_response)
    country = country_match.group(1).strip() if country_match else "-"

    if any(x in country.lower() for x in ["–Ω–µ –≤–¥–∞–ª–æ—Å—è", "–≤–∞–∂–∫–æ", "–Ω–µ–≤—ñ–¥–æ–º–æ", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"]):
        country = "-"

    if any(x in email.lower() for x in ["–Ω–µ –≤–∫–∞–∑–∞–Ω–æ", "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", "email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"]):
        email = "-"

    return email, country


def get_gsheet_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(GSHEET_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def simplify_url(link):
    parsed = urlparse(link)
    return f"{parsed.scheme}://{parsed.netloc}"

def analyze_with_gpt(title, snippet, link):
    prompt = f"""
    –¢–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –ø—Ä–æ–¥–∞–∂—É –≤ –∫–æ–º–ø–∞–Ω—ñ—ó, —è–∫–∞ –∑–∞–π–º–∞—î—Ç—å—Å—è –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º —Ä–µ–Ω—Ç–≥–µ–Ω-–ø–ª—ñ–≤–∫–∏, –∫–∞—Å–µ—Ç, –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤ —Ç–∞ –º–µ–¥–∏—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.

–í–µ–±—Å–∞–π—Ç –Ω–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó: https://www.xraymedem.com

 –ó–∞–≤–¥–∞–Ω–Ω—è:
–ù–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∏–∂—á–µ (–Ω–∞–∑–≤–∏, –æ–ø–∏—Å—É —Ç–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏), –≤–∏–∑–Ω–∞—á:
‚Äî –ß–∏ –º–æ–∂–µ –∫–æ–º–ø–∞–Ω—ñ—è –±—É—Ç–∏ –Ω–∞—à–∏–º –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º?
‚Äî –á—ó —Ç–∏–ø (—Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ —Å–ª–æ–≤–æ: –¥–∏—Å—Ç—Ä–∏–±'—é—Ç–æ—Ä, —Ä–µ—Å–µ–ª–µ—Ä, –≤–∏—Ä–æ–±–Ω–∏–∫, –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–æ—â–æ)
‚Äî –ö—Ä–∞—ó–Ω—É (–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—Ç–∞–π, –Ü–Ω–¥—ñ—è, –°–®–ê, –û–º–∞–Ω...)

 –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:
–ù–∞–∑–≤–∞ (Google): {title}  
–û–ø–∏—Å: {snippet}  
–õ—ñ–Ω–∫: {link}

 –í–ê–ñ–õ–ò–í–û:
‚Äî –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏: –≤—Å—ñ, —Ö—Ç–æ –ø—Ä–æ–¥–∞—î –∞–±–æ –∑–≥–∞–¥—É—î —Ä–µ–Ω—Ç–≥–µ–Ω-–ø–ª—ñ–≤–∫—É, –∫–∞—Å–µ—Ç–∏, –º–µ–¥–∏—á–Ω—ñ –ø—Ä–∏–Ω—Ç–µ—Ä–∏.  
‚Äî –¶–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏: –¥–∏—Å—Ç—Ä–∏–±‚Äô—é—Ç–æ—Ä–∏, —Ä–µ—Å–µ–ª–µ—Ä–∏, –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏.  
‚Äî –ù–µ –≤–≤–∞–∂–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–æ–º –æ—Ñ—ñ—Ü—ñ–π–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Fujifilm India", —è–∫—â–æ —Ü–µ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª –±—Ä–µ–Ω–¥—É).  
‚Äî –ù–∞–≤—ñ—Ç—å –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –¥–∏—Å—Ç—Ä–∏–±‚Äô—é—Ç–æ—Ä–∏ –±—Ä–µ–Ω–¥—É ‚Äî —Ü–µ –Ω–∞—à—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏.

 –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω–∏ ‚Äî –∑–∞ —Ç–∞–∫–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏:
‚Äî –¥–æ–º–µ–Ω —Å–∞–π—Ç—É (.cn, .in, .ua, .com —Ç–æ—â–æ)  
‚Äî –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∞–±–æ –∫—Ä–∞—ó–Ω–∏ –≤ –æ–ø–∏—Å—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Shenzhen, China)  
‚Äî –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω—É (+86 = –ö–∏—Ç–∞–π)  
‚Äî –∑–≥–∞–¥–∫–∞ –≤ –Ω–∞–∑–≤—ñ –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "India Pvt Ltd")

 –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó: ...  
–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫/–ù—ñ ‚Äî (–ø–æ—è—Å–Ω–µ–Ω–Ω—è)  
–¢–∏–ø: ... (–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º)  
–ü–æ—à—Ç–∞: ...  
–ö—Ä–∞—ó–Ω–∞: ... (–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –ª–∏—à–µ –Ω–∞–∑–≤–∞ –∫—Ä–∞—ó–Ω–∏)
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ GPT", layout="wide")
st.title("üîç –ü–æ—à—É–∫")

query = st.text_input("–í–≤–µ–¥–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:")
col1, col2 = st.columns(2)
with col1:
    num_results = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", min_value=1, max_value=100, value=10, step=1)
with col2:
    start_index = st.number_input("–ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ‚Ññ", min_value=1, max_value=91, value=1, step=10)

start = st.button("–ü–æ—à—É–∫")

if start and query:
    tab_name = query.strip().lower().replace("/", "_")[:30]
    with st.spinner("–ü–æ—à—É–∫ —Ç–∞ GPT-–∞–Ω–∞–ª—ñ–∑..."):
        params = {
            "key": st.secrets["GOOGLE_API_KEY"],
            "cx": st.secrets["CSE_ID"],
            "q": query,
            "num": num_results,
            "start": start_index
        }
        results = requests.get("https://www.googleapis.com/customsearch/v1", params=params).json().get("items", [])

        gc = get_gsheet_client()
        sh = gc.open_by_key(GSHEET_SPREADSHEET_ID)

        try:
            sheet = sh.worksheet(tab_name)
        except:
            sheet = sh.add_worksheet(title=tab_name, rows="1000", cols="6")
            sheet.append_row(["–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó", "–°–∞–π—Ç", "–ü–æ—à—Ç–∞", "–¢–∏–ø", "–ö—Ä–∞—ó–Ω–∞", "–í—ñ–¥–≥—É–∫ GPT"])

        existing_links = set(sheet.col_values(2))

        for item in results:
            title = item["title"]
            raw_link = item["link"]
            link = simplify_url(raw_link)
            if link in existing_links:
                continue

            snippet = item.get("snippet", "")

            try:
                gpt_response = analyze_with_gpt(title, snippet, link)
            except Exception as e:
                gpt_response = f"–ü–æ–º–∏–ª–∫–∞: {e}"

            st.markdown(f"### üîé [{title}]({link})")
            st.markdown("üß† **GPT:**")
            st.code(gpt_response, language="markdown")

      if "–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫" in gpt_response:
    name_match = re.search(r"–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó: (.+)", gpt_response)
    type_match = re.search(r"–¢–∏–ø: (.+)", gpt_response)
    client_match = re.search(r"–ö–ª—ñ—î–Ω—Ç: (–¢–∞–∫|–ù—ñ)", gpt_response)

    name = name_match.group(1).strip() if name_match else title
    org_type = type_match.group(1).strip() if type_match else "-"
    client_status = f"–ö–ª—ñ—î–Ω—Ç: {client_match.group(1)}" if client_match else "-"

    email, country = extract_email_and_country(gpt_response)

    if email.lower().startswith("—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"):
        email = "-"
    if country.lower().startswith("—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"):
        country = "-"

    sheet.append_row([name, link, email, org_type, country, client_status], value_input_option="USER_ENTERED")
    existing_links.add(link)

        st.success(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–æ –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' –∑ –∫—Ä–∞—ó–Ω–æ—é, —Ç–∏–ø–æ–º —ñ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ '–ö–ª—ñ—î–Ω—Ç: –¢–∞–∫'")
